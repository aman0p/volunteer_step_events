import { PrismaClient } from '@/generated/prisma'
import { seedVerification } from './seed-verification'
import { seedEvents } from './seed-events'
import { seedEnrollments } from './seed-enrollments'

const prisma = new PrismaClient()

async function seedAll() {
  try {
    console.log('üöÄ Starting complete database seeding...\n')

    // Step 1: Seed verification (creates users)
    console.log('üìù Step 1: Seeding users and verification requests...')
    await seedVerification()
    console.log('‚úÖ Users and verification requests seeded\n')

    // Step 2: Seed events
    console.log('üéâ Step 2: Seeding events...')
    await seedEvents()
    console.log('‚úÖ Events seeded\n')

    // Step 3: Seed enrollments
    console.log('üë• Step 3: Seeding enrollments...')
    await seedEnrollments()
    console.log('‚úÖ Enrollments seeded\n')

    console.log('üéä All seeding completed successfully!')
    console.log('\nüìä Database Summary:')
    
    // Show final counts
    const userCount = await prisma.user.count()
    const eventCount = await prisma.event.count()
    const enrollmentCount = await prisma.enrollment.count()
    const verificationCount = await prisma.verificationRequest.count()

    console.log(`   üë§ Users: ${userCount}`)
    console.log(`   üéâ Events: ${eventCount}`)
    console.log(`   üìù Enrollments: ${enrollmentCount}`)
    console.log(`   ‚úÖ Verification Requests: ${verificationCount}`)

  } catch (error) {
    console.error('‚ùå Error during seeding:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Run the seeding if this file is executed directly
if (require.main === module) {
  seedAll()
    .then(() => {
      console.log('\nüéâ Complete seeding script finished successfully!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\n‚ùå Complete seeding script failed:', error)
      process.exit(1)
    })
}

export default seedAll
