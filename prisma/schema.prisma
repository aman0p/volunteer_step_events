// Next steps:
// 1. Run prisma dev to start a local Prisma Postgres server.
// 2. Define models in the schema.prisma file.
// 3. Run prisma migrate dev to migrate your local Prisma Postgres database.
// 4. Tip: Explore how you can extend the ORM with scalable connection pooling, global caching, and a managed serverless Postgres database. Read: https://pris.ly/cli/beyond-orm

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id            String       @id @default(uuid())
  title         String
  description   String
  location      String
  startDate     DateTime
  endDate       DateTime
  dressCode     String
  category      String[]
  coverUrl      String
  color         String?
  videoUrl      String?
  eventImages   String[]
  maxVolunteers Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  enrollments   Enrollment[]
}

model User {
  id                   String                @id @default(uuid())
  fullName             String
  email                String                @unique
  password             String                @db.VarChar(255)
  phoneNumber          String                @unique
  profileImage         String
  skills               String[]
  address              String
  gender               Gender
  govIdImage           String
  govIdType            GovId
  role                 Role                  @default(USER)
  isVerified           Boolean               @default(false)
  lastActiveAt         DateTime              @default(now())
  createdAt            DateTime              @default(now())
  enrollments          Enrollment[]
  notifications        Notification[]
  verificationRequests VerificationRequest[]
  reviewedRequests     VerificationRequest[] @relation("ReviewedBy")
}

model Enrollment {
  id          String    @id @default(uuid())
  status      Status    @default(PENDING)
  enrolledAt  DateTime  @default(now())
  cancelledAt DateTime? // Track when user cancels enrollment
  event       Event     @relation(fields: [eventId], references: [id])
  eventId     String
  user        User      @relation(fields: [userId], references: [id])
  userId      String

  @@unique([eventId, userId])
}

model Notification {
  id                   String           @id @default(uuid())
  title                String
  message              String
  type                 NotificationType
  isRead               Boolean          @default(false)
  createdAt            DateTime         @default(now())
  user                 User             @relation(fields: [userId], references: [id])
  userId               String
  relatedEventId       String?         // For event-related notifications
  relatedEnrollmentId  String?         // For enrollment-related notifications
}

model VerificationRequest {
  id               String              @id @default(uuid())
  user             User                @relation(fields: [userId], references: [id])
  userId           String
  status           VerificationStatus  @default(PENDING)
  submittedAt      DateTime            @default(now())
  reviewedAt       DateTime?
  reviewedBy       User?               @relation("ReviewedBy", fields: [reviewedById], references: [id])
  reviewedById     String?
  adminNote        String?
  rejectionReason  String?
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum GovId {
  AADHAR_CARD
  PASSPORT
  DRIVING_LICENSE
  PAN_CARD
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  WAITLISTED
  CANCELLED
}

enum Role {
  USER
  VOLUNTEER
  ORGANIZER
  ADMIN
}

enum NotificationType {
  // Enrollment related
  ENROLLMENT_APPLICATION
  ENROLLMENT_APPROVED
  ENROLLMENT_REJECTED
  ENROLLMENT_WAITLISTED
  ENROLLMENT_CANCELLED
  ENROLLMENT_SELF_CANCELLED
  
  // Event related
  NEW_EVENT_ADDED
  EVENT_UPDATE
  EVENT_REMINDER
  
  // Verification related
  VERIFICATION_REQUEST
  VERIFICATION_APPROVED
  VERIFICATION_REJECTED
  
  // General
  SYSTEM_MESSAGE
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}
