// Next steps:
// 1. Run prisma dev to start a local Prisma Postgres server.
// 2. Define models in the schema.prisma file.
// 3. Run prisma migrate dev to migrate your local Prisma Postgres database.
// 4. Tip: Explore how you can extend the ORM with scalable connection pooling, global caching, and a managed serverless Postgres database. Read: https://pris.ly/cli/beyond-orm

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id            String       @id @default(uuid())
  title         String
  description   String
  location      String
  startDate     DateTime
  endDate       DateTime
  dressCode     String
  category      String[]
  coverUrl      String
  color         String?
  videoUrl      String?
  eventImages   String[]
  maxVolunteers Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  enrollments   Enrollment[]
}

model User {
  id           String       @id @default(uuid())
  fullName     String
  email        String       @unique
  password     String       @db.VarChar(255)
  phoneNumber  String       @unique
  profileImage String
  skills       String[]
  address      String
  gender       Gender
  govIdImage   String
  govIdType    GovId
  role         Role         @default(VOLUNTEER)
  lastActiveAt DateTime     @default(now())
  createdAt    DateTime     @default(now())
  enrollments  Enrollment[]
  notifications Notification[]
}

model Enrollment {
  id          String    @id @default(uuid())
  status      Status    @default(PENDING)
  enrolledAt  DateTime  @default(now())
  cancelledAt DateTime? // Track when user cancels enrollment
  event       Event     @relation(fields: [eventId], references: [id])
  eventId     String
  user        User      @relation(fields: [userId], references: [id])
  userId      String

  @@unique([eventId, userId])
}

model Notification {
  id          String           @id @default(uuid())
  title       String
  message     String
  type        NotificationType
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  relatedEventId String?       // For event-related notifications
  relatedEnrollmentId String?  // For enrollment-related notifications
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum GovId {
  AADHAR_CARD
  PASSPORT
  DRIVING_LICENSE
  PAN_CARD
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  WAITLISTED
  CANCELLED
}

enum Role {
  VOLUNTEER
  ORGANIZER
  ADMIN
}

enum NotificationType {
  ENROLLMENT_APPLICATION    // Admin gets notified when user applies
  ENROLLMENT_APPROVED      // User gets notified when approved
  ENROLLMENT_REJECTED      // User gets notified when rejected
  ENROLLMENT_WAITLISTED    // User gets notified when waitlisted
  ENROLLMENT_CANCELLED     // User gets notified when cancelled
  ENROLLMENT_SELF_CANCELLED // User gets notified when they cancel themselves
  NEW_EVENT_ADDED          // User gets notified when new event is added
  EVENT_UPDATE             // User gets notified about event changes
  EVENT_REMINDER          // User gets notified before event
  SYSTEM_MESSAGE          // General system notifications
}
